/*
 * @lc app=leetcode.cn id=32 lang=cpp
 *
 * [32] 最长有效括号
 *
 * https://leetcode-cn.com/problems/longest-valid-parentheses/description/
 *
 * algorithms
 * Hard (29.87%)
 * Likes:    632
 * Dislikes: 0
 * Total Accepted:    55.8K
 * Total Submissions: 183.7K
 * Testcase Example:  '"(()"'
 *
 * 给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。
 * 
 * 示例 1:
 * 
 * 输入: "(()"
 * 输出: 2
 * 解释: 最长有效括号子串为 "()"
 * 
 * 
 * 示例 2:
 * 
 * 输入: ")()())"
 * 输出: 4
 * 解释: 最长有效括号子串为 "()()"
 * 
 * 
 */
// REVIEW

#include <iostream>
#include <algorithm>
using namespace std;

// @lc code=start
class Solution {
private:
public:
    int longestValidParentheses(string s) {
        int lvp = 0;
        int left = 0, right = 0;
        for (auto it = s.begin(); it != s.end(); it++) {
            if (*it == '(') {
                ++left;
            } else {
                ++right;
            }

            if (left == right) lvp = max(lvp, left * 2);
            else if (left < right) left = right = 0;
        }
        left = right = 0;
        for (auto it = s.rbegin(); it != s.rend(); it++) {
            if (*it == '(') {
                ++left;
            } else {
                ++right;
            }

            if (left == right) lvp = max(lvp, left * 2);
            else if (left > right) left = right = 0;
        }

        return lvp;
    }
};
// @lc code=end

int main() {
    cout << Solution().longestValidParentheses("(()") << endl;
    cout << Solution().longestValidParentheses(")()())") << endl;
    cout << Solution().longestValidParentheses("(()(()))())))())))(((()(())))(()())((())((()()()(())))))()(())))())))(())())())((())))((((()))((())()))()(()()(())))())())))()))(()()((()(())()))((())(((()()()(((())((()()((())()))(()(())))()()))(()()))))))))((()())((((())(())())((())((()))))((()()(())()))()())((()((()))(()((())()()))((()()(()(()((())))()((())((()))()(()))())(()()())())()())(()()))))((()())(())()((()))(()(((())()(())))(())())))()))())))()()((()(((()(())(())))((()))())())())))))))((()(((())(())))(((())(()((()))))))())())()((()()((()()(())((()(((()((()())(()())()()()))()(()(()(()(((((()()))(((()))(()((()((((((()())(()))())((()))())()())()((()))())))()(()(()()))()((())())((()((())(()((())((()))))((((((((())()())))()))())((())())())()()())))))(()))()())(())(((((())((()))((()()())()))))(())))))(()(((((((())((()((()))((())((((())))))))))()))))))(()(())))))((()))(()))(()))((()((())((()(()((()(())(()()())())()))()())()(()))))(()())()()))(()())))(()))))((()()))(()()()())))))(())()()(((()()()()((())(()()())(((()(()((((()(())())))()(((()(()())))())())(()))()))())())(()()()()()())())(())((((())((((((((((()())()))())))())()))))))()(()((((((()))))))()())((()())())(()())()()()))(())()(()(()()))()))(((()(((())())()((())()))(()()((((())()))))(()(((())((())(())())()))((())(())())()(()()(())()())(()()))())()))()())()((()(((()((()()(()())))))()(()((((((((()())))(()(()))((((()()))))))))((()()(()(())(()())(((()))(())))))())(((((()((())())()())()()())()())()())))((()(()()))(((()()((())())((()(()(()())(((((()()(())))))())(())(())(()(()))(())()()))(()))(())()())((((())()())())))))()(())))()(())(())))((()()()((())()(())(()((((()))())())()(()()())()())()(()(()(()))(()(()()((())(()())))(((()(())()())(())()))(())()))())())((((()()(()))())))))))(((()))(()(()()))))))))((()))(()((()))(((((()()()))((((()()(()())((()(())))())(((()(()()))(((())()))((") << endl;
    return 0;
}
